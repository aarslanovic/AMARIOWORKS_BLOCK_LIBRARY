"SCRIPT TO CREATE A PRODUCT ADD NAMES TO PARTS"
"---------------------------------------------------------------------------"

import rhinoscriptsyntax as rs

# Function to get the next product number
def get_next_product_number():
    try:
        product_counter = rs.GetDocumentData("ProductData", "Counter")
        if product_counter is None:
            product_counter = 1
        else:
            product_counter = int(product_counter) + 1
        rs.SetDocumentData("ProductData", "Counter", str(product_counter))
        return product_counter
    except Exception as e:
        print("Error getting product number: ", e)
        return None

def CreateBlockOnLayer():
    # Prompt user to select parts
    objs = rs.GetObjects("Select parts to group into a block", preselect=True)
    if not objs:
        print("No objects selected. Exiting script.")
        return None
    
    # Check if "Product" layer exists, create if not
    layer_name = "Product"
    if not rs.IsLayer(layer_name):
        rs.AddLayer(layer_name)
    
    # Set the layer color to green
    original_layer_color = rs.LayerColor(layer_name)
    rs.LayerColor(layer_name, (0, 255, 0))
    
    # Set the current layer to "Product"
    rs.CurrentLayer(layer_name)
    
    # Get the next product number
    product_number = get_next_product_number()
    if product_number is None:
        print("Failed to get a product number. Exiting script.")
        rs.LayerColor(layer_name, original_layer_color)  # Restore original layer color
        return None
    
    # Format the product number as a three-digit string
    formatted_product_number = "{:03}".format(product_number)
    
    # Prompt user to name the block
    block_name = rs.GetString("Enter a name for the block", "Product_" + formatted_product_number)
    if not block_name:
        print("No block name entered. Exiting script.")
        rs.LayerColor(layer_name, original_layer_color)  # Restore original layer color
        return None
    
    # Format the block name with the product number
    formatted_block_name = "{}.) {}".format(formatted_product_number, block_name)
    
    # Create the block definition
    insertion_point = (0, 0, 0)  # We use origin to ensure no movement
    block = rs.AddBlock(objs, insertion_point, formatted_block_name, True)
    if not block:
        print("Block creation failed.")
        rs.LayerColor(layer_name, original_layer_color)  # Restore original layer color
        return None
    
    # Insert the block at the same location as the original objects
    block_instance = rs.InsertBlock(formatted_block_name, insertion_point)
    
    # Delete the original objects
    rs.DeleteObjects(objs)
    
    # Set the name of the block instance to appear in properties
    rs.ObjectName(block_instance, formatted_block_name)
    
    # Zoom into the block
    rs.ZoomBoundingBox(rs.BoundingBox(block_instance))
    
    print("Block '{}' with product number '{}' created successfully on layer '{}'.".format(formatted_block_name, formatted_product_number, layer_name))
    
    return block_instance, formatted_block_name

def describe_parts(parts, product_name):
    try:
        if not parts:
            print("No parts provided. Exiting script.")
            return

        # Function to collect all objects within selected blocks
        def collect_objects_in_blocks(objects):
            all_objects = []
            for obj in objects:
                if rs.IsBlockInstance(obj):
                    block_name = rs.BlockInstanceName(obj)
                    block_objects = rs.BlockObjects(block_name)
                    all_objects.extend(block_objects)
                else:
                    all_objects.append(obj)
            return all_objects

        # Collect all objects and objects within blocks
        all_objects = collect_objects_in_blocks(parts)

        # Capture the initial display mode and view settings
        initial_display_mode = rs.ViewDisplayMode(rs.CurrentView())
        initial_camera, initial_target = rs.ViewCameraTarget()

        # Set the display mode to transparent
        rs.Command('_SetDisplayMode _Viewport=Active _Mode=Ghosted')
        
        # Create a dictionary to store part descriptions and original colors
        part_descriptions = {}
        original_colors = {}

        # Store the original colors of all objects
        for obj in all_objects:
            original_colors[obj] = rs.ObjectColor(obj)
        
        # Initialize part counter
        part_counter = 1
        
        for part in all_objects:
            # Set color of all parts to gray except the current part
            for obj in all_objects:
                if obj != part:
                    rs.ObjectColor(obj, (200, 200, 200)) # Light gray color
                else:
                    rs.ObjectColor(obj, (255, 0, 0)) # Red color to highlight

            # Highlight the current part
            rs.SelectObject(part)
            
            # Zoom to the selected part
            rs.ZoomSelected()
            
            # Get the existing name of the part if any
            existing_name = rs.ObjectName(part)
            if existing_name is None:
                existing_name = ""
            
            # Prompt the user to enter a description for the selected part
            description = rs.StringBox("Enter description for the selected part", default_value=existing_name)
            
            if description is None:
                # User pressed cancel
                raise KeyboardInterrupt
            
            if description:
                # Format the part name with the product name and part counter
                formatted_description = "{} - {:03}.) {}".format(product_name, part_counter, description)
                
                # Store the description in the dictionary
                part_descriptions[part] = {"description": formatted_description}
                rs.ObjectName(part, formatted_description)
                print("Description added: {}".format(formatted_description))
                
                # Increment the part counter
                part_counter += 1
            else:
                print("No description entered for part {}. Part skipped.".format(part))
            
            # Deselect the current part
            rs.UnselectObject(part)
        
        # Reset the display mode to the initial mode
        rs.Command('_SetDisplayMode _Viewport=Active _Mode={}'.format(initial_display_mode))

        # Restore the original colors of all objects
        for obj, color in original_colors.items():
            rs.ObjectColor(obj, color)

        # Restore the initial view settings
        rs.ViewCameraTarget(None, initial_camera, initial_target)

        # Output all descriptions
        for part, info in part_descriptions.items():
            print("Part ID: {}, Description: {}".format(part, info["description"]))
    
    except KeyboardInterrupt:
        print("Operation cancelled by user.")
        # Reset the display mode to the initial mode
        rs.Command('_SetDisplayMode _Viewport=Active _Mode={}'.format(initial_display_mode))

        # Restore the original colors of all objects
        for obj, color in original_colors.items():
            rs.ObjectColor(obj, color)

        # Restore the initial view settings
        rs.ViewCameraTarget(None, initial_camera, initial_target)

if __name__ == "__main__":
    # Create the block and get the block instance along with the product name
    block_instance, formatted_block_name = CreateBlockOnLayer()
    if block_instance:
        # Pass the block name (formatted_block_name) as the product name
        describe_parts([block_instance], formatted_block_name)
